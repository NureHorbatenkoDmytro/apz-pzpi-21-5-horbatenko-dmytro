РОЗРОБКА IOT ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ

Мета роботи:
Покращити навички проектування програмних систем. Розробити smart device частину програмної системи та описати її з допомогою демонстраційного відеоролику, UML Use Case Diagram, Interaction Overview Diagram, Activity Diagram та Package Diagram.

1 МОДЕЛЮВАННЯ ПРОГРАМНОЇ СИСТЕМИ

IoT частина є ключовим компонентом системи, який забезпечує збір даних про стан рослин та автоматизацію догляду за ними. Метою розробки цієї частини системи є створення інтегрованого рішення, яке дозволить користувачам підтримувати оптимальні умови для вирощування рослин з мінімальними зусиллями. Використання сучасних технологій, таких як мова програмування C# та платформа .NET 8, забезпечує надійність та ефективність системи.

1.1	Архітектура IoT частини

Архітектура IoT частини включає сенсори та контролери, які виконують різні функції для підтримки оптимального мікроклімату для рослин. Сенсори збирають дані про мікрокліматичні умови, такі як вологість ґрунту, температура та освітлення. Контролери виконують автоматизовані дії, такі як полив рослин та регулювання освітлення, базуючись на даних, отриманих від сенсорів. Ці пристрої підключаються до серверної частини через мережу і передають дані у реальному часі, забезпечуючи безперервний моніторинг та управління мікрокліматом.
Сенсори вимірюють вологість ґрунту, температуру та рівень освітлення, передаючи ці дані до серверної частини системи. Контролери, на основі отриманих даних, здійснюють автоматизований полив та регулювання освітлення, забезпечуючи оптимальні умови для росту рослин.

1.2	Основні компоненти IoT частини

Основними компонентами IoT частини є сенсори та контролери. Сенсори збирають дані про мікрокліматичні умови навколо рослин, такі як вологість ґрунту, температура та освітлення. Ці дані передаються на сервер, де вони обробляються та зберігаються для подальшого аналізу та управління. Контролери використовують отримані дані для виконання автоматизованих дій, таких як полив рослин та регулювання освітлення, забезпечуючи оптимальні умови для їхнього росту.

1.3	Технології та інструменти

Для реалізації IoT частини системи використовуються такі технології та інструменти:
–	.NET 8: Використовується для розробки програмного забезпечення сенсорів та контролерів. Забезпечує високий рівень продуктивності та безпеки.
–	MQTT (Message Queuing Telemetry Transport): Легкий протокол публікації/підписки, який використовується для передачі даних від сенсорів до серверної частини. Підтримує низьку затримку та високу надійність передачі даних.
–	Azure IoT Hub: Хмарна платформа для управління IoT пристроями. Забезпечує безпечне з'єднання та обробку даних, зібраних сенсорами.

1.4	Функціональні можливості IoT частини

IoT частина системи забезпечує такі функціональні можливості:
–	Моніторинг мікроклімату в режимі реального часу: Безперервний збір даних про вологість ґрунту, температуру та освітлення. Передача зібраних даних на сервер для подальшої обробки та аналізу.
–	Автоматизація догляду за рослинами: Полив рослин в залежності від рівня вологості ґрунту. Регулювання освітлення для забезпечення оптимальних умов росту рослин.
–	Сповіщення та рекомендації: Надання користувачам своєчасних сповіщень про зміну умов мікроклімату. Генерація рекомендацій щодо догляду за рослинами на основі зібраних даних.

1.5	 Взаємодія з серверною частиною

Сенсори та контролери IoT частини взаємодіють з серверною частиною через протокол MQTT. Дані, зібрані сенсорами, передаються на сервер, де вони обробляються та зберігаються в базі даних PostgreSQL. Серверна частина також відповідає за надсилання команд контролерам для автоматизації процесів догляду за рослинами.

1.6	Приклади реалізації

–	Сенсор вологості ґрунту: Розроблений з використанням мікроконтролера ESP32. Програмне забезпечення написане на C# з використанням .NET 8. Підключається до мережі Wi-Fi та передає дані на сервер через MQTT.
–	Контролер поливу: Використовує реле для керування насосом поливу. Програмне забезпечення написане на C# з використанням .NET 8. Отримує команди від серверної частини та виконує полив у разі потреби.
–	Таким чином, IoT частина системи забезпечує ефективний збір даних про стан рослин та автоматизацію догляду за ними, що дозволяє користувачам підтримувати оптимальні умови для росту рослин з мінімальними зусиллями.

2	ПРОЕКТУВАННЯ IOT ЧАСТИНИ

Ми будемо використовувати мову програмування C# та платформу .NET 8 для реалізації IoT частини. Також тут буде представлено UML діаграми, які допоможуть краще зрозуміти архітектуру та взаємодію компонентів системи.

2.1 UML Діаграма Компонентів

У цьому розділі буде представлено діаграму компонентів для IoT частини системи. Вона показує основні компоненти та їх взаємодію 
Компоненти:
–	Microcontroller: Основний контролер, який збирає дані з сенсорів і відправляє їх на сервер, а також отримує команди від сервера для управління актуаторами;
–	Sensors: Включають сенсори вологості, температури та освітлення, які збирають дані про стан мікроклімату;
–	Actuators: Включають водяний насос та освітлення, які виконують автоматизовані дії на основі команд від мікроконтролера;
–	CloudServer: Хмарний сервер, який обробляє дані, зберігає їх у базі даних, надсилає сповіщення користувачам і приймає команди від додатків користувачів;
–	Database: База даних, де зберігаються всі зібрані дані про мікроклімат і стан рослин;
–	UserApp: Додаток для користувачів, який включає мобільний додаток та веб-додаток, дозволяючи користувачам моніторити стан рослин і керувати системою.
Ця діаграма надає візуальне представлення архітектури компонентів IoT частини системи для моніторингу та управління мікрокліматом для домашніх рослин.

2.2 UML Діаграма Прецедентів

Для детального опису функціональності системи та взаємодії користувачів з системою було створено UML діаграму прецедентів. Ця діаграма надає візуальне уявлення про те, як користувачі можуть взаємодіяти з різними компонентами системи (див. рис. 2).

2.3 UML Діаграма Взаємодії

Для UML діаграми взаємодій описано взаємодію між компонентами IoT системи для моніторингу та управління мікрокліматом для домашніх рослин. Основними компонентами будуть: сенсори, IoT контролер, серверна частина та користувач.
Опис процесу:
1.	Сенсор збирає дані про мікроклімат (вологість, температура, освітлення тощо);
2.	Сенсор передає зібрані дані на IoT контролер;
3.	IoT контролер обробляє дані і передає їх на сервер;
4.	Сервер зберігає дані в базі даних;
5.	Користувач запитує дані з серверу через мобільний або веб-додаток;
6.	Сервер відповідає даними, які відображаються користувачу.

2.4 UML Діаграма Діяльності

Для UML діаграми діяльності опишемо процес автоматичного поливу рослин на основі зібраних даних про вологість ґрунту. Цей процес включає кілька кроків: збір даних, перевірка вологості, прийняття рішення та виконання поливу.
Опис процесу:
1.	Сенсор збирає дані про вологість ґрунту.
2.	IoT контролер отримує дані від сенсора.
3.	IoT контролер перевіряє рівень вологості.
4.	Якщо вологість нижче встановленого порогу, IoT контролер включає систему поливу.
5.	Система поливу зволожує ґрунт.
6.	Після завершення поливу IoT контролер вимикає систему поливу.

3   ТЕХНОЛОГІЇ ТА АРХІТЕКТУРНІ РІШЕННЯ

У цьому розділі буде розглянуто технології та архітектурні рішення, які використовуються для розробки IoT частини програмної системи для моніторингу та управління мікрокліматом для домашніх рослин. Основна увага буде приділена мові програмування C# та платформі .NET 8, а також взаємодії компонентів IoT системи.
IoT частина системи побудована на основі сучасних технологій, що забезпечують високу продуктивність, надійність та масштабованість. Основними технологіями є:
–	C# та .NET 8: Основна мова програмування та платформа для розробки програмного забезпечення. .NET 8 забезпечує високу продуктивність, безпеку та підтримку асинхронного програмування;
–	Azure IoT Hub: Хмарна платформа для підключення, моніторингу та керування мільйонами IoT пристроїв. Azure IoT Hub забезпечує безпечну та надійну передачу даних між пристроями та серверною частиною;
–	MQTT: Легковагий протокол обміну повідомленнями, спеціально розроблений для роботи з IoT пристроями. MQTT забезпечує надійну та ефективну передачу даних між сенсорами та контролерами.
IoT частина системи має модульну архітектуру, що дозволяє легко масштабувати та оновлювати систему. Основні компоненти архітектури:
–	Сенсори: Збирають дані про мікроклімат, такі як вологість ґрунту, температура та освітлення. Сенсори підключаються до IoT контролерів та передають дані через протокол MQTT;
–	IoT контролери: Отримують дані від сенсорів, обробляють їх та приймають рішення про необхідні дії, такі як полив або зміна освітлення. Контролери також передають зібрані дані на серверну частину через Azure IoT Hub;
–	Серверна частина: Зберігає та обробляє зібрані дані, генерує звіти та рекомендації для користувачів. Серверна частина також керує налаштуваннями автоматизації та взаємодіє з мобільним додатком та веб-інтерфейсом.
Взаємодія між компонентами IoT системи забезпечується за допомогою протоколу MQTT та Azure IoT Hub. Сенсори передають дані на контролери, які обробляють ці дані та приймають рішення про необхідні дії. Контролери передають зібрані дані на серверну частину, де вони зберігаються та обробляються для подальшого аналізу та генерування рекомендацій.
Розгортання IoT частини здійснюється на основі Azure IoT Hub, що забезпечує легке масштабування системи за рахунок додавання нових сенсорів та контролерів без необхідності значних змін у архітектурі. Використання хмарних технологій дозволяє забезпечити високу надійність та доступність системи, а також спрощує процес оновлення та підтримки.
Безпека та захист даних є ключовими аспектами IoT системи. Для забезпечення безпеки використовується кілька рівнів захисту:
–	Шифрування даних: Дані, що передаються між сенсорами, контролерами та серверною частиною, шифруються для запобігання несанкціонованого доступу;
–	Аутентифікація та авторизація: Користувачі та пристрої проходять процедуру аутентифікації та авторизації для отримання доступу до системи та її компонентів;
–	Моніторинг та логування: Система забезпечує моніторинг та логування всіх дій та подій, що дозволяє виявляти та реагувати на потенційні загрози та порушення безпеки.

Висновки:
У ході виконання лабораторної роботи були отримані навички з проєктування IoT частини програмної системи. Результатом роботи є розроблена програмна реалізація IoT програмної частини, що включає збір даних про мікроклімат, обробку цих даних та автоматизацію догляду за рослинами.
Було розроблено та проаналізовано архітектуру системи, що дозволяє легко масштабувати та оновлювати систему. Це забезпечує високу продуктивність та надійність роботи всієї системи.
Отримані результати демонструють можливість створення розумної системи для моніторингу та управління мікрокліматом для домашніх рослин, що може бути корисним для багатьох користувачів, які бажають покращити умови вирощування рослин та автоматизувати процес догляду за ними.

ДОДАТОК А
AuthService.cs
1	public async Task<string> AuthenticateAsync(string email, string password)
2	{
3	    var requestBody = new
4	    {
5	        email = email,
6	        password = password
7	    };
8	 
9	    var json = JsonConvert.SerializeObject(requestBody);
10	    var content = new StringContent(json, Encoding.UTF8, "application/json");
11	 
12	    var request = new HttpRequestMessage(HttpMethod.Post, _authUrl)
13	    {
14	        Content = content
15	    };
16	    request.Headers.Add("User-Agent", "IoT");
17	 
18	    var response = await _httpClient.SendAsync(request);
19	    response.EnsureSuccessStatusCode();
20	 
21	    var responseContent = await response.Content.ReadAsStringAsync();
22	    var token = JsonConvert.DeserializeObject<AuthResponse>(responseContent).AccessToken;
23	 
24	    return token;
25	}

 
ДОДАТОК Б
EncryptionService.cs
1	 public string Encrypt(string plainText)
2	 {
3	     using (Aes aesAlg = Aes.Create())
4	     {
5	         aesAlg.Key = Encoding.UTF8.GetBytes(_key);
6	         aesAlg.IV = Encoding.UTF8.GetBytes(_iv);
7	 
8	         ICryptoTransform encryptor = aesAlg.CreateEncryptor(aesAlg.Key, aesAlg.IV);
9	 
10	         using (MemoryStream msEncrypt = new MemoryStream())
11	         {
12	             using (CryptoStream csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write))
13	             {
14	                 using (StreamWriter swEncrypt = new StreamWriter(csEncrypt))
15	                 {
16	                     swEncrypt.Write(plainText);
17	                 }
18	             }
19	             return Convert.ToBase64String(msEncrypt.ToArray());
20	         }
21	     }
22	 }

 
ДОДАТОК В
MqttClient.cs
1	public class MqttClientService
2	{
3	    private readonly IMqttClient _mqttClient;
4	 
5	    public MqttClientService()
6	    {
7	        var factory = new MqttFactory();
8	        _mqttClient = factory.CreateMqttClient();
9	    }
10	 
11	    public async Task ConnectAsync(string broker, int port)
12	    {
13	        var options = new MqttClientOptionsBuilder()
14	            .WithTcpServer(broker, port)
15	            .Build();
16	 
17	        _mqttClient.ConnectedAsync += async e =>
18	        {
19	            Console.WriteLine("Connected successfully with MQTT Brokers.");
20	            await Task.CompletedTask;
21	        };
22	 
23	        _mqttClient.DisconnectedAsync += async e =>
24	        {
25	            Console.WriteLine("Disconnected from MQTT Brokers.");
26	            await Task.CompletedTask;
27	        };
28	
29	        await _mqttClient.ConnectAsync(options, CancellationToken.None);
30	    }
31	
32	    public async Task PublishAsync(string topic, string data)
33	    {
34	        var payload = JsonSerializer.Serialize(data);
35	        var message = new MqttApplicationMessageBuilder()
36	            .WithTopic(topic)
37	            .WithPayload(payload)
38	            .WithQualityOfServiceLevel(MQTTnet.Protocol.MqttQualityOfServiceLevel.ExactlyOnce)
39	            .WithRetainFlag()
40	            .Build();
41	
42	        await _mqttClient.PublishAsync(message, CancellationToken.None);
43	    }
44	}

