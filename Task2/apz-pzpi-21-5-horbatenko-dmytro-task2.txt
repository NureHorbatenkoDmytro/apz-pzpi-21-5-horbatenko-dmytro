1 ОПИС АРХІТЕКТУРИ СИСТЕМИ

У системі для моніторингу та управління мікрокліматом для домашніх рослин є три типи користувачів: Адміністратори, Користувачі та Зовнішні інтегратори. Користувачі взаємодіють з веб-частиною та мобільним додатком для моніторингу та управління своїми рослинами. Адміністратори взаємодіють з веб-частиною для адміністрування системи, включаючи створення, редагування та видалення даних користувачів та налаштувань системи, а також управління резервними копіями даних. Зовнішні інтегратори використовують API для доступу до системи та інтеграції з іншими смарт-системами.

2 ПОБУДОВА ДІАГРАМИ РОЗГОРТАННЯ

Для розгортання системи використовується платформа Nest.js для серверної частини, React для веб-інтерфейсу та Kotlin для мобільного застосунку. Сервер працює з базою даних PostgreSQL через ORM Prisma. Дані зберігаються в хмарі, а доступ до них здійснюється за допомогою токенів авторизації.

3 ОПИС АРХІТЕКТУРИ СЕРВЕРНОЇ ЧАСТИНИ

Сервер написаний на фреймворку Nest.js, який є гнучким фреймворком для JavaScript, дозволяючи писати код у вигляді зручних модулів та маючи нативну підтримку Jest. Він працює в середовищі Node.js, яке необхідне для виконання написаного коду.
У якості бази даних використано PostgreSQL, до якої здійснюється доступ з серверного застосунку за допомогою технології Prisma. Це дуже зручна бібліотека, яка дозволяє створювати та оперувати базою даних за допомогою моделей та класів, і вона має свою мову написання схеми.
Для більш детальної візуалізації використаних технологій було розроблено діаграму розгортання (див. рис. 1).
Для демонстрації та тестування API використовується OpenApi (Swagger), зручний інструмент для перегляду та тестування API, що покращує якість та зручність розробки. Для забезпечення безпеки даних та конфіденційності використовується захищений протокол HTTPS, який захищає дані під час їх передачі.
Для шифрування паролів та створення токенів авторизації в Nest.js використовується бібліотека bcrypt для хешування паролів та jsonwebtoken для створення токенів. Для передачі та отримання даних використовуються властивості REST API. При отриманні запиту сервер перевіряє валідність за допомогою Guard, які виконують код перед обробкою запитом.
Розроблений серверний застосунок побудований за принципами модульної архітектури, де кожен модуль складається з декількох шарів: Controller, який приймає запити; Service, який обробляє запити; Repository, який взаємодіє з базою даних. Кожен шар залежить від вищого.
В архітектуру також був доданий Guard, який перевіряє запити на валідність інформації, наприклад, перевіряє термін дії токену та інші аспекти. Використовуються інтерцептори (Pipeline Interceptors), які перехоплюють запити та можуть їх блокувати, не допускаючи непідходящі дані до контролера. При відправленні відповіді використовується інтерцептор, який видаляє непідходящі дані, такі як паролі та інше.
Архітектура серверного застосунку представлена на діаграмі пакетів (див. додаток Б рис. Б.1).
Приклади частин коду серверного застосунку представлено у додатках В, Г та Д.

4 ПОБУДОВА ДІАГРАМИ ПРЕЦЕДЕНТІВ

Користувачі можуть додавати, оновлювати та видаляти дані про свої рослини через веб-додаток. Вони можуть отримувати статистику та рекомендації щодо оптимальних умов для вирощування рослин, а також налаштовувати параметри автоматизації, такі як полив та освітлення. Мобільний додаток дозволяє переглядати та керувати станом рослин у режимі реального часу, отримувати сповіщення та рекомендації. Користувачі також можуть переглядати середні параметри та тренди даних для своїх рослин, а також отримувати кореляції між різними параметрами мікроклімату.
Адміністратори мають можливість створювати, модифікувати та видаляти дані в системі, а також керувати обліковими записами користувачів. Вони забезпечують підтримку та налаштування системи для забезпечення її стабільної роботи. Адміністратори також можуть переглядати загальну статистику використання системи, генерувати звіти та управляти резервними копіями даних, забезпечуючи їх створення та відновлення. Крім того, адміністратори можуть здійснювати видалення даних рослин разом з усіма пов'язаними даними про мікроклімат.
Зовнішні інтегратори можуть використовувати API для доступу до системи від імені організацій або для інтеграції з іншими смарт-системами. Це дозволяє розширити функціональність системи та забезпечити її взаємодію з іншими технологіями, а також отримувати дані про стан рослин для подальшого аналізу або інтеграції. Зовнішні інтегратори також можуть отримувати середні параметри, тренди та кореляції для аналізу даних про рослини.

5 ПОБУДОВА ER-ДІАГРАМИ

Для бази даних була створена ER діаграма (див. рис. 1), яка стала основою для створення самої бази даних та її подальшого використання. Вона складається з декількох основних таблиць: Користувачів, Рослин, Даних, Типів рослин, Ролей та Токенів.
На діаграмі можна побачити такі зв’язки:
–	User –> Plant – Один для багатьох: Один користувач може мати безліч рослин, кожна з яких має свої параметри та дані моніторингу.
–	Plant -> Data – Один для багатьох: Кожна рослина може мати багато записів даних про мікроклімат, такі як вологість, температура, освітлення тощо.
–	User -> Token – Один для багатьох: Один користувач може мати багато токенів для доступу до системи.
–	Plant -> Plant Types – Багато до одного: Кожна рослина має один тип, але один тип може мати багато рослин.
–	User -> Roles – Багато до одного: Один користувач може мати одну роль, але одна роль може бути призначена багатьом користувачам.
Користувачі можуть додавати свої рослини до системи та моніторити їх стан за допомогою даних з різних сенсорів. Адміністратори мають можливість керувати всіма аспектами системи.
База даних повністю контролюється бібліотекою Prisma, яка дозволяє абстрагуватися від прямої взаємодії з базою даних. Це забезпечує зручність та безпеку роботи з даними.
Наразі база даних розміщена на хмарі, а дані для підключення до неї зберігаються у файлі .env.

6 СПЕЦИФІКАЦІЯ REST

REST API в даному проекті складається із 32 кінцевих точок. Кожна кінцева точка відповідає за надання даних користувачеві та виконання бізнес логіки. Специфікація кожного ендпоінту наведена у виді таблиці (див. таб. 1)

ВИСНОВКИ

У ході виконання лабораторної роботи були отримані навички з проєктування серверної частини програмної системи, розробки сценаріїв використання, діаграм розгортання та пакетів, проєктуванні бази даних. Була розроблена програмна реалізація серверної частини програмної системи.

ДОДАТОК А

Специфікація REST

Таблиця 1 – Специфікація REST API
Шлях Метод Призначення 
/api/auth/register POST Реєстрація нового користувача 
/api/auth/login POST Вхід користувача 
/api/auth/logout GET Вихід користувача 
/api/auth/refresh-tokens GET Оновлення токенів доступу 
/api/user/:idOrEmail GET Отримання користувача за ID або email 
/api/user/:id DELETE Видалення користувача 
/api/user PUT Оновлення користувача 
/api/user GET Отримання поточного користувача 
/api/plant-types POST Додавання нового типу рослини 
/api/plant-types/:id GET Отримання типу рослини за ID 
/api/plant-types/:id PATCH Оновлення типу рослини за ID 
/api/plant-types/:id DELETE Видалення типу рослини за ID 
/api/plants POST Додавання нової рослини 
/api/plants/:id GET Отримання рослини за ID 
/api/plants/:id PATCH Оновлення рослини за ID 
/api/plants/:id DELETE Видалення рослини за ID 
/api/plant-data POST Додавання даних про мікроклімат 
/api/plant-data/:id GET Отримання даних про мікроклімат за ID 
/api/plant-data/:id PATCH Оновлення даних про мікроклімат за ID 
/api/plant-data/:id DELETE Видалення даних про мікроклімат за ID 
/api/backup/create POST Створення резервної копії 
/api/backup/restore POST Відновлення з резервної копії 
/api/backup/download/:folderName GET Завантаження резервної копії 
/api/integration/:id GET Отримання даних для інтеграції за ID 
/api/integration POST Додавання даних для інтеграції 
/api/integration/:id PATCH Оновлення даних для інтеграції за ID 
/api/integration/:id DELETE Видалення даних для інтеграції за ID 
/api/plant-data/average/:plantId GET Отримання середніх параметрів рослини 
/api/plant-data/trends/:plantId GET Отримання трендів параметрів рослини 
/api/plant-data/correlations/:plantId GET Отримання кореляцій параметрів рослини 

ДОДАТОК В
plant-data.service.ts
1	async getAverageParameters(plantId: string) {
2	    const data = await this.prisma.data.findMany({
3	      where: {
4	        plantId,
5	      },
6	    });
7	 
8	    const totals = {
9	      humidity: 0,
10	      temperature: 0,
11	      light: 0,
12	      nutrientLevel: 0,
13	    };
14	 
15	    for (const entry of data) {
16	      totals.humidity += entry.humidity;
17	      totals.temperature += entry.temperature;
18	      totals.light += entry.light;
19	      totals.nutrientLevel += entry.nutrientLevel;
20	    }
21	 
22	    const count = data.length;
23	 
24	    return {
25	      avgHumidity: count ? totals.humidity / count : 0,
26	      avgTemperature: count ? totals.temperature / count : 0,
27	      avgLight: count ? totals.light / count : 0,
28	      avgNutrientLevel: count ? totals.nutrientLevel / count : 0,
29	    };
30	  }
31	 
32	  async getParameterTrends(plantId: string): Promise<TrendResult[]> {
33	    const data = await this.prisma.data.findMany({
34	      where: {
35	        plantId,
36	      },
37	      orderBy: {
38	        timestamp: 'asc',
39	      },
40	    });
41	 
42	    const trends: Record<string, Trend> = {};
43	 
44	    for (const entry of data) {
45	      const timestamp = entry.timestamp.toISOString().split('T')[0];
46	 
47	      if (!trends[timestamp]) {
48	        trends[timestamp] = {
49	          humidity: 0,
50	          temperature: 0,
51	          light: 0,
52	          nutrientLevel: 0,
53	          count: 0,
54	        };
55	      }
56	 
57	      trends[timestamp].humidity += entry.humidity;
58	      trends[timestamp].temperature += entry.temperature;
59	      trends[timestamp].light += entry.light;
60	      trends[timestamp].nutrientLevel += entry.nutrientLevel;
61	      trends[timestamp].count += 1;
62	    }
63	 
64	    return Object.entries(trends).map(([timestamp, values]) => ({
65	      timestamp,
66	      avgHumidity: values.humidity / values.count,
67	      avgTemperature: values.temperature / values.count,
68	      avgLight: values.light / values.count,
69	      avgNutrientLevel: values.nutrientLevel / values.count,
70	    }));
71	  }
72	 
73	  async getParameterCorrelations(plantId: string) {
74	    const data = await this.prisma.data.findMany({
75	      where: {
76	        plantId,
77	      },
78	    });
79	 
80	    const correlationMatrix = {
81	      humidityTemperature: this.calculateCorrelation(data, 'humidity', 'temperature'),
82	      humidityLight: this.calculateCorrelation(data, 'humidity', 'light'),
83	      temperatureLight: this.calculateCorrelation(data, 'temperature', 'light'),
84	      humidityNutrientLevel: this.calculateCorrelation(data, 'humidity', 'nutrientLevel'),
85	      temperatureNutrientLevel: this.calculateCorrelation(data, 'temperature', 'nutrientLevel'),
86	      lightNutrientLevel: this.calculateCorrelation(data, 'light', 'nutrientLevel'),
87	    };
88	 
89	    return correlationMatrix;
90	  }
91	 
92	  private calculateCorrelation(data: any[], param1: string, param2: string): number {
93	    const n = data.length;
94	    const sum1 = data.reduce((sum, entry) => sum + entry[param1], 0);
95	    const sum2 = data.reduce((sum, entry) => sum + entry[param2], 0);
96	    const sum1Sq = data.reduce((sum, entry) => sum + entry[param1] ** 2, 0);
97	    const sum2Sq = data.reduce((sum, entry) => sum + entry[param2] ** 2, 0);
98	    const pSum = data.reduce((sum, entry) => sum + entry[param1] * entry[param2], 0);
99	 
100	    const num = pSum - (sum1 * sum2) / n;
101	    const den = Math.sqrt((sum1Sq - sum1 ** 2 / n) * (sum2Sq - sum2 ** 2 / n));
102	 
103	    if (den === 0) return 0;
104	    return num / den;
105	  }
 
ДОДАТОК Г
auth.service.ts
1	async refreshTokens(refreshToken: string, agent: string): Promise<Tokens> {
2	    const token = await this.prismaService.token.delete({ where: { token: refreshToken } });
3	    if (!token || new Date(token.exp) < new Date()) {
4	      throw new UnauthorizedException();
5	    }
6	    const user = await this.userService.findOne(token.userId);
7	    return this.generateTokens(user, agent);
8	  }
9	 
10	  async register(dto: RegisterDto) {
11	    const user: User = await this.userService.findOne(dto.email).catch((err) => {
12	      this.logger.error(err);
13	      return null;
14	    });
15	    if (user) {
16	      throw new ConflictException('User with this email already registered.');
17	    }
18	    return this.userService.save(dto).catch((err) => {
19	      this.logger.error(err);
20	      return null;
21	    });
22	  }
23	 
24	  async login(dto: LoginDto, agent: string): Promise<Tokens> {
25	    const user: User = await this.userService.findOne(dto.email, true).catch((err) => {
26	      this.logger.error(err);
27	      return null;
28	    });
29	    if (!user || !compareSync(dto.password, user.password)) {
30	      throw new UnauthorizedException('Wrong login or password');
31	    }
32	    return this.generateTokens(user, agent);
33	  }
34	 
35	  private async generateTokens(user: User, agent: string): Promise<Tokens> {
36	    const accessToken =
37	      'Bearer ' +
38	      this.jwtService.sign({
39	        id: user.id,
40	        email: user.email,
41	        roles: user.roles,
42	      });
43	    const refreshToken = await this.getRefreshToken(user.id, agent);
44	    return { accessToken, refreshToken };
45	  }
46	 
47	  private async getRefreshToken(userId: string, agent: string): Promise<Token> {
48	    const _token = await this.prismaService.token.findFirst({
49	      where: { userId, userAgent: agent },
50	    });
51	 
52	    const token = _token?.token ?? '';
53	 
54	    return this.prismaService.token.upsert({
55	      where: { token },
56	      update: {
57	        token: v4(),
58	        exp: add(new Date(), { months: 1 }),
59	      },
60	      create: {
61	        token: v4(),
62	        exp: add(new Date(), { months: 1 }),
63	        userId,
64	        userAgent: agent,
65	      },
66	    });
67	  }
68	 
69	  deleteRefreshToken(token: string) {
70	    return this.prismaService.token.delete({ where: { token } });
71	  }
72	 
73	  async providerAuth(email: string, agent: string, provider: Provider) {
74	    const userExists = await this.userService.findOne(email);
75	    if (userExists) {
76	      const user = await this.userService.save({ email, provider }).catch((err) => {
77	        this.logger.error(err);
78	        return null;
79	      });
80	      return this.generateTokens(user, agent);
81	    }
82	    const user = await this.userService.save({ email, provider }).catch((err) => {
83	      this.logger.error(err);
84	      return null;
85	    });
86	    if (!user) {
87	      throw new HttpException(
88	        `Unable to create user with email "${email}" using ${provider} auth`,
89	        HttpStatus.BAD_REQUEST,
90	      );
91	    }
92	    return this.generateTokens(user, agent);
93	  }

ДОДАТОК Д
backup.service.ts
1	 async createBackup(): Promise<BackupDto> {
2	    const users = await this.prisma.user.findMany({
3	      include: {
4	        Token: true,
5	        plants: {
6	          include: {
7	            data: true,
8	            type: true,
9	          },
10	        },
11	      },
12	    });
13	 
14	    const plantTypes = await this.prisma.plantType.findMany();
15	 
16	    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
17	    const backupDir = path.resolve('backups', timestamp);
18	    if (!fs.existsSync(backupDir)) {
19	      fs.mkdirSync(backupDir, { recursive: true });
20	    }
21	 
22	    const userWriter = createObjectCsvWriter({
23	      path: path.join(backupDir, `users.csv`),
24	      header: [
25	        { id: 'id', title: 'id' },
26	        { id: 'email', title: 'email' },
27	        { id: 'password', title: 'password' },
28	        { id: 'provider', title: 'provider' },
29	        { id: 'createdAt', title: 'createdAt' },
30	        { id: 'updatedAt', title: 'updatedAt' },
31	        { id: 'roles', title: 'roles' },
32	        { id: 'isBlocked', title: 'isBlocked' },
33	      ],
34	    });
35	 
36	    const userRecords = users.map((user) => ({
37	      id: user.id,
38	      email: user.email,
39	      password: user.password,
40	      provider: user.provider || '',
41	      createdAt: user.createdAt.toISOString(),
42	      updatedAt: user.updatedAt.toISOString(),
43	      roles: user.roles.join(' '),
44	      isBlocked: user.isBlocked,
45	    }));
46	 
47	    await userWriter.writeRecords(userRecords);
48	 
49	    const tokenWriter = createObjectCsvWriter({
50	      path: path.join(backupDir, `tokens.csv`),
51	      header: [
52	        { id: 'token', title: 'token' },
53	        { id: 'exp', title: 'exp' },
54	        { id: 'userId', title: 'userId' },
55	        { id: 'userAgent', title: 'userAgent' },
56	      ],
57	    });
58	 
59	    const tokenRecords = users.flatMap((user) =>
60	      user.Token.map((token) => ({
61	        token: token.token,
62	        exp: token.exp.toISOString(),
63	        userId: user.id,
64	        userAgent: token.userAgent,
65	      })),
66	    );
67	 
68	    await tokenWriter.writeRecords(tokenRecords);
69	 
70	    const plantWriter = createObjectCsvWriter({
71	      path: path.join(backupDir, `plants.csv`),
72	      header: [
73	        { id: 'id', title: 'id' },
74	        { id: 'name', title: 'name' },
75	        { id: 'plantTypeId', title: 'plantTypeId' },
76	        { id: 'userId', title: 'userId' },
77	        { id: 'plantingDate', title: 'plantingDate' },
78	        { id: 'currentStatus', title: 'currentStatus' },
79	        { id: 'soilType', title: 'soilType' },
80	      ],
81	    });
82	 
83	    const plantRecords = users.flatMap((user) =>
84	      user.plants.map((plant) => ({
85	        id: plant.id,
86	        name: plant.name,
87	        plantTypeId: plant.plantTypeId,
88	        userId: user.id,
89	        plantingDate: plant.plantingDate.toISOString(),
90	        currentStatus: plant.currentStatus,
91	        soilType: plant.soilType,
92	      })),
93	    );
94	 
95	    await plantWriter.writeRecords(plantRecords);
96	 
97	    const dataWriter = createObjectCsvWriter({
98	      path: path.join(backupDir, `data.csv`),
99	      header: [
100	        { id: 'id', title: 'id' },
101	        { id: 'humidity', title: 'humidity' },
102	        { id: 'temperature', title: 'temperature' },
103	        { id: 'light', title: 'light' },
104	        { id: 'nutrientLevel', title: 'nutrientLevel' },
105	        { id: 'plantId', title: 'plantId' },
106	        { id: 'timestamp', title: 'timestamp' },
107	      ],
108	    });
109	 
110	    const dataRecords = users.flatMap((user) =>
111	      user.plants.flatMap((plant) =>
112	        plant.data.map((data) => ({
113	          id: data.id,
114	          humidity: data.humidity,
115	          temperature: data.temperature,
116	          light: data.light,
117	          nutrientLevel: data.nutrientLevel,
118	          plantId: plant.id,
119	          timestamp: data.timestamp.toISOString(),
120	        })),
121	      ),
122	    );
123	 
124	    await dataWriter.writeRecords(dataRecords);
125	 
126	    const plantTypeWriter = createObjectCsvWriter({
127	      path: path.join(backupDir, `plantTypes.csv`),
128	      header: [
129	        { id: 'id', title: 'id' },
130	        { id: 'typeName', title: 'typeName' },
131	        { id: 'description', title: 'description' },
132	        { id: 'optimalHumidity', title: 'optimalHumidity' },
133	        { id: 'optimalTemperature', title: 'optimalTemperature' },
134	        { id: 'optimalLight', title: 'optimalLight' },
135	      ],
136	    });
137	 
138	    const plantTypeRecords = plantTypes.map((plantType) => ({
139	      id: plantType.id,
140	      typeName: plantType.typeName,
141	      description: plantType.description,
142	      optimalHumidity: plantType.optimalHumidity,
143	      optimalTemperature: plantType.optimalTemperature,
144	      optimalLight: plantType.optimalLight,
145	    }));
146	 
147	    await plantTypeWriter.writeRecords(plantTypeRecords);
148	 
149	    const backupDto = new BackupDto();
150	    backupDto.fileName = timestamp;
151	 
152	    return backupDto;
153	  }

